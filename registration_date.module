<?php
/**
 * @file
 * Provides integration between Registration and Date modules.
 */

/**
 * Drupal variable name which holds settings for when to close registrations.
 */
define('REGISTRATION_DATE_FIELD_OPEN', 'registration_date_field_open');

/**
 * Drupal variable name which holds settings for when to close registrations.
 */
define('REGISTRATION_DATE_FIELD_CLOSE', 'registration_date_field_close');

/**
 * Drupal variable name which holds settings for whether to disable date
 * functionality provided by Registration module.
 * 
 * Variable data stored as:
 * [$entity_type][$bundle][$registration_field_name] = (boolean)
 */
define('REGISTRATION_DATE_REGISTRATION_DATES_DISABLE', 'registration_date_registration_dates_disable');

/**
 * Implements hook_cron().
 * 
 * Automatically close entities whose closing date has passed.
 * 
 * @todo: This could be made more efficient, get entities where 
 * registration_entity:status = 1 and (date is set || date < now)
 */
function registration_date_cron() {
  /* This code is invalid -- uses old API's.
  $query = db_select('registration_entity', 'r')
    ->fields('r', array('entity_type', 'entity_id'))
    ->condition('status', 1)
    ->condition('entity_id', 0, '>')
    ->execute();

  $registration_entity = array();
  foreach ($query as $row) {
    $registration_entity[$row->entity_type][] = $row->entity_id;
  }

  foreach ($registration_entity as $entity_type => $entity_ids) {
    $entities = entity_load($entity_type, $entity_ids);
    foreach ($entities as $entity) {
      registration_date_has_expired($entity_type, $entity, TRUE);
    }
  }*/
}

/**
 * Implements hook_date_theme().
 */
function registration_date_theme() {
  return array(
    'registration_date_field_ui' => array(
      'render element' => 'form',
      'file' => 'registration_date.module',
    ),
  );
}

/**
 * Implement hook_registration_status_alter().
 * 
 * @param $entity_type
 *   The type of entity.
 * @param $entity_id
 *   The entity ID.
 * @param $variables
 *   Mixed registration settings to alter.
 */
function registration_date_registration_status_alter(&$status, $context) {
  $entity_type = $context['entity_type'];
  $entity_id   = $context['entity_id'];

  $entities = entity_load($entity_type, array($entity_id));

  if (isset($entities[$entity_id])) {
    $date_status = registration_date_registration_status($entity_type, $entities[$entity_id]);

    if ($date_status !== NULL) {
      $status = (boolean)$date_status;
    }
  }
}

/**
 * Disable opening registrations on registration settings page, if date is in
 * past.
 * 
 * Implements hook_form_FORM_ID_alter().
 */
function registration_date_form_registration_registrations_settings_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['build_info']['args'][1])) {
    return;
  }

  $entity_type = $form_state['entity']['entity_type'];
  $entity_id = $form_state['entity']['entity_id'];
  $entity = $form_state['build_info']['args'][1];
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  $registration_field_name = _registration_date_registration_field_name($entity_type, $bundle);

  // Disable Registration date fields if necessary
  $registration_dates_enable = variable_get(REGISTRATION_DATE_REGISTRATION_DATES_DISABLE, array());

  if (!empty($registration_dates_enable[$entity_type][$bundle][$registration_field_name])) {
    if (empty($form['scheduling']['open']['#default_value'])) {
      $form['scheduling']['open']['#access'] = FALSE;
    }
    if (empty($form['scheduling']['close']['#default_value'])) {
      $form['scheduling']['close']['#access'] = FALSE;
    }
  }
  
  // Show date diagnostic table

  // Check if any fields are configured for this bundle.
  if (!(count(_registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, REGISTRATION_DATE_FIELD_OPEN)) + count(_registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, REGISTRATION_DATE_FIELD_CLOSE)))) {
    return;
  }

  $header = array(
    'Label',
    'Value',
    'Action',
    'Active',
  );

  $action_localization = array(
    'open' => t('Open'),
    'close' => t('Close'),
  );

  $dates = registration_date_registration_dates($entity_type, $entity);
  $dates_unix = array();
  foreach ($dates as $date) {
    $unix = date_format($date['date'], DATE_FORMAT_UNIX);

    if (is_numeric($unix) && $unix > 0) {
      $dates_unix[$unix] = $date['field_name'];
    }
  }

  ksort($dates_unix);

  // Find current applied date
  $active_field_name = '';
  foreach ($dates_unix as $unix_date => $field_name) {
    if ($unix_date <= time()) {
      $active_field_name = $field_name;
    }
    else {
      break;
    }
  }

  $rows = array();
  foreach ($dates_unix as $unix_date => $field_name) {
    $row = array();
    $instance = field_info_instance($entity_type, $field_name, $bundle);

    $active = t('No');
    if ($field_name == $active_field_name) {
      $active = t('Yes');
    }
    elseif ($unix_date > 0 && $unix_date <= time()) {
      $active = t('Overridden');
    }

    $row[] = array('data' => $instance['label']);
    $row[] = array('data' => format_date($unix_date));
    $row[] = array('data' => $action_localization[$dates[$field_name]['action']]);
    $row[] = array('data' => $active);

    $rows[] = $row;
  }

  $form['scheduling']['registration_date_explain'] = array(
    '#type' => 'item',
    '#title' => t('Date fields'),
    '#markup' => theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'caption' => t('How dates are applied to this registration.'),
      'empty' => t('No dates have been added to this registration.'),
    )),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * Add field to associate closing date on field UI settings page.
 * 
 * Builds grid containing each date field attached to this bundle, and whether
 * to use each field for opening or closing registrations on the entity.
 * 
 * @todo: Offset
 */
function registration_date_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $entity_type = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $registration_field_name = $form['#instance']['field_name'];

  if ($form['#field']['type'] != 'registration') {
    return;
  }
  
  $fields = field_info_fields();
  $date_types = array(DATE_UNIX, DATE_ISO, DATE_DATETIME);

  $options = array(
    0 => t('None'),
    1 => t('Open'),
    2 => t('Closed'),
  );

  $form['registration_date'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration Date'),
    '#tree' => TRUE,
  );

  $registration_dates_enable = variable_get(REGISTRATION_DATE_REGISTRATION_DATES_DISABLE, array());

  $form['registration_date']['registration_contrib_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Registration dates'),
    '#description' => t('Disable built-in date functionality provided by Registration module. Any existing open and close dates are preserved, and may be edited. No new values are permitted.'),
    '#default_value' => (!empty($registration_dates_enable[$entity_type][$bundle][$registration_field_name])),
  );

  $form['registration_date']['status']['#theme'] = 'registration_date_field_ui';

  $open  = _registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, REGISTRATION_DATE_FIELD_OPEN);
  $close = _registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, REGISTRATION_DATE_FIELD_CLOSE);

  foreach ($fields as $field_name => $field) {
    if (in_array($field['type'], $date_types) && isset($field['bundles'][$entity_type])) {
      if (in_array($bundle, $field['bundles'][$entity_type])) {
        $instance = field_info_instance($entity_type, $field_name, $bundle);

        $form['registration_date']['status']['fields'][$field_name] = array(
          '#label' => $instance['label'],
          '#machine_name' => $field_name,
        );

        $default_value = 0;
        if (in_array($field_name, $open)) {
          $default_value = 1;
        }
        elseif (in_array($field_name, $close)) {
          $default_value = 2;
        }

        $form['registration_date']['status']['radios'][$field_name] = array(
          '#type' => 'radios',
          '#options' => $options,
          '#default_value' => $default_value,
        );
      }
    }
  }

  $form['#submit'][] = 'registration_date_field_ui_submit';
}

/**
 * Process submission for form elements in 
 * registration_date_form_field_ui_field_edit_form_alter().
 */
function registration_date_field_ui_submit(&$form, &$form_state) {
  $entity_type = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $registration_field_name = $form['#instance']['field_name'];

  // Disable Registration dates
  $registration_date_enable = variable_get(REGISTRATION_DATE_REGISTRATION_DATES_DISABLE, array());
  $registration_date_enable[$entity_type][$bundle][$registration_field_name] = (boolean)$form_state['values']['registration_date']['registration_contrib_date'];
  variable_set(REGISTRATION_DATE_REGISTRATION_DATES_DISABLE, $registration_date_enable);

  // Open/Close field mapping
  $open = variable_get(REGISTRATION_DATE_FIELD_OPEN, array());
  $close = variable_get(REGISTRATION_DATE_FIELD_CLOSE, array());

  $open[$entity_type][$bundle][$registration_field_name] = array();
  $close[$entity_type][$bundle][$registration_field_name] = array();

  if (!empty($form_state['values']['registration_date']['status']['radios'])) {
    foreach ($form_state['values']['registration_date']['status']['radios'] as $field_name => $value) {
      switch ($value) {
        case 1:
          $open[$entity_type][$bundle][$registration_field_name][] = $field_name;
          break;
        case 2:
          $close[$entity_type][$bundle][$registration_field_name][] = $field_name;
          break;
      }
    }
  }

  variable_set(REGISTRATION_DATE_FIELD_OPEN, $open);
  variable_set(REGISTRATION_DATE_FIELD_CLOSE, $close);
}

function theme_registration_date_field_ui($variables) {
  $form = $variables['form'];
  $rows = array();

  foreach (element_children($form['fields']) as $field_name) {
    // Field description
    $row = array(
      array(
        'data' => $form['fields'][$field_name]['#label'],
      ),
      array(
        'data' => $form['fields'][$field_name]['#machine_name'],
      )
    );

    // Each radio for a field.
    foreach (element_children($form['radios'][$field_name]) as $column_key) {
      $form['radios'][$field_name][$column_key]['#title_display'] = 'invisible';
      $row[] = array(
        'data' => drupal_render($form['radios'][$field_name][$column_key]),
      );
    }

    $rows[] = $row;
  }

  $header = array(
    'Label',
    'Name',
    'None',
    'Open',
    'Close',
  );

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'caption' => t('Automatically open or close registration for entities based on values of Date fields.'),
    'empty' => t('Please add a date field to this bundle.'),
  )) . drupal_render_children($form);
}

/**
 * Determine if Registrations should be opened, or closed for an entity.
 * 
 * Field values for each date field set in configuration are fetched and 
 * ordered. Whichever date is last, and nonzero is the new status.
 * 
 * @param $entity_type
 *   The type of entity.
 * @param $entity
 *   The entity object.
 * @param $save
 *   Save open or closed value to {registration_entity} settings.
 */
function registration_date_registration_status($entity_type, $entity, $save = FALSE) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  if (_registration_date_registration_field_name($entity_type, $bundle)) {
    $dates_unix = array(); // unix_time => open/close

    $dates = registration_date_registration_dates($entity_type, $entity);
    foreach ($dates as $date) {
      $unix = date_format($date['date'], DATE_FORMAT_UNIX);

      if (!empty($unix) && is_numeric($unix) && $unix <= time()) {
        $dates_unix[$unix] = $date['action'];
      }
    }

    ksort($dates_unix);

    if ($action = end($dates_unix)) {
      if ($action == 'open') {
        if ($save) {
          registration_date_status_set($entity_type, $entity, 1);
        }
        return TRUE;
      }
      elseif ($action == 'close') {
        if ($save) {
          registration_date_status_set($entity_type, $entity, 0);
        }
        return FALSE;
      }
    }
  }
}

/**
 * Get all dates for a registration entity.
 * 
 * @param $entity_type
 *   The type of entity.
 * @param $entity
 *   The entity object.
 */
function registration_date_registration_dates($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $registration_field_name = _registration_date_registration_field_name($entity_type, $bundle);

  $dates = array();

  $queue = array(
    'open' => _registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, REGISTRATION_DATE_FIELD_OPEN),
    'close' => _registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, REGISTRATION_DATE_FIELD_CLOSE),
  );

  foreach ($queue as $action => $fields) {
    foreach ($fields as $field_name) {
      $field_info = field_info_field($field_name);
      $format = date_type_format($field_info['type']);
      if (isset($entity->{$field_name}[LANGUAGE_NONE][0])) {
        $field_value = $entity->{$field_name}[LANGUAGE_NONE][0];
        $dates[$field_name] = array(
          'date' => new DateObject($field_value['value'], $field_value['timezone_db'], $format),
          'field_name' => $field_name,
          'action' => $action,
        );
      }
    }
  }

  return $dates;
}

/**
 * Set Registation status for an entity.
 * 
 * @param $entity_type
 *   The type of entity.
 * @param $entity
 *   The entity object.
 * @param $status
 *   1: open, 0: closed
 */
function registration_date_status_set($entity_type, $entity, $status) {
  list($entity_id) = entity_extract_ids($entity_type, $entity);

  db_update('registration_entity')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->fields(array('status' => $status))
    ->execute();
}

/**
 * Get the field_name of registration field attached to entity.
 * 
 * @param $entity_type
 *   The type of entity.
 * @param $entity
 *   The entity object.
 * 
 * @return
 *   field_name. Or FALSE.
 */
function _registration_date_registration_field_name($entity_type, $bundle) {
  $field_names = &drupal_static(__FUNCTION__);

  if (isset($field_names[$entity_type][$bundle])) {
    return $field_names[$entity_type][$bundle];
  }

  $fields = field_info_fields();

  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'registration' && isset($field['bundles'][$entity_type])) {
      if (in_array($bundle, $field['bundles'][$entity_type])) {
        return $field_names[$entity_type][$bundle] = $field_name;
      }
    }
  }

  return FALSE;
}

/**
 * @param $entity_type
 *   The type of entity.
 * @param $bundle
 *   The entity bundle.
 * @param $registration_field_name
 *   Field name of registration field.
 * @param $when
 *   Constant REGISTRATION_DATE_FIELD_*.
 */
function _registration_date_variable_get_field_date($entity_type, $bundle, $registration_field_name, $when) {
  $date_field = variable_get($when, array());
  return isset($date_field[$entity_type][$bundle][$registration_field_name]) ? $date_field[$entity_type][$bundle][$registration_field_name] : array();
}